{"version":3,"sources":["models/Node.tsx","models/EventLog.tsx","models/PaxosNetworkProtocol.tsx","components/AppDescription.tsx","components/EventLogTable.tsx","components/NetworkGraph.tsx","components/ProposerControls.tsx","components/NetworkControls.tsx","components/NetworkLayout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NodeType","Proposal","number","value","LogLevel","Node","errorPercentage","nodeType","maxAcceptableProposalNumber","previousProposal","id","x","y","d3Id","this","uniqueId","d3UniqueId","Math","random","proposalNumber","failsRequest","Error","proposal","EventLog","level","Info","message","generateNetwork","nodeCount","paxosProtocolNetwork","PaxosProtocolNetwork","proposer","Proposer","registerNode","proposerId","i","node","Acceptor","nodes","nodeIdLookup","_proposerId","chosenValue","eventLog","undefined","push","responses","acceptor","handlePropose","e","String","length","proposalValue","maxProposal","handlePrepare","propose","AppDescription","props","collapseIcon","showDescription","spacing","alignItems","size","align","in","onClick","onCollapse","EventLogTable","tableRows","map","log","index","NetworkGraph","svgElement","useRef","forceSimulation","useEffect","handleResize","width","height","current","baseVal","stop","force","d3","restart","window","addEventListener","removeEventListener","console","links","j","source","target","getConnectedLinks","onProposerChange","svg","linkElements","selectAll","data","d","join","enter","append","style","nodeElements","nodeGroup","attr","text","update","raise","simulation","strength","on","call","event","active","alphaTarget","subject","fx","fy","drag","buildGraph","className","ref","ProposerControls","columns","columnGap","rowGap","w","colSpan","min","minProposalValue","onChange","onProposalNumberChange","placeholder","onProposalValueChange","onPropose","NetworkControls","max","onNodeCountChange","label","step","onErrorPercentageChange","onGenerateGraph","NetworkLayout","useBreakpointValue","base","md","useState","setNodeCount","setErrorPercentage","setProposalValue","setMinProposalValue","setProposalNumber","setPaxosProtocolNetwork","setShowDescription","maxWidth","padding","h","py","direction","p","bg","parseInt","parseFloat","handleGenerateGraph","prepare","Object","assign","nodeId","previousNetwork","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da956bde.chunk.js","sourcesContent":["import { SimulationNodeDatum } from \"d3-force\";\n\nexport class Proposal {\n    constructor(public number: number = -1, public value: string = '') { }\n}\n\nexport enum NodeType {\n    Acceptor,\n    Proposer\n}\n\nexport class Node implements SimulationNodeDatum {\n\n    static d3UniqueId = 0; // A number that always increments makes it easier to work with D3\n    static uniqueId = 0;\n\n    errorPercentage: number;\n    nodeType: NodeType;\n    maxAcceptableProposalNumber: number;\n    previousProposal: Proposal;\n    id: number;\n    x: number;\n    y: number;\n    d3Id: number;\n\n    static resetIdCounter() {\n        this.uniqueId = 0;\n    }\n\n    constructor(errorPercentage: number, nodeType: NodeType, x: number = 0, y: number = 0) {\n        this.errorPercentage = errorPercentage;\n        this.nodeType = nodeType;\n        this.x = 0;\n        this.y = 0;\n        this.maxAcceptableProposalNumber = 0;\n        this.previousProposal = new Proposal();\n        this.id = Node.uniqueId++;\n        this.d3Id = Node.d3UniqueId++;\n    }\n\n    failsRequest() {\n        return (this.errorPercentage > Math.random())\n    }\n\n    handlePrepare(proposalNumber: number) {\n        if(this.failsRequest()) {\n            throw new Error(\"Randomly failed to respond to prepare request\");\n        }\n        if(proposalNumber < this.maxAcceptableProposalNumber) {\n            throw new Error(\"Proposal number is too low to accept. Maximum acceptable value is \" + this.maxAcceptableProposalNumber);\n        }\n        this.maxAcceptableProposalNumber = proposalNumber;\n        return this.previousProposal;\n    }\n\n    handlePropose(proposal: Proposal) {\n        if(this.failsRequest()) {\n            throw new Error(\"Randomly failed to respond to propose request\");\n        }\n        if(proposal.number < this.maxAcceptableProposalNumber) {\n            throw new Error(\"Proposal number is too low to accept. Maximum acceptable value is \" + this.maxAcceptableProposalNumber);\n        }\n        this.maxAcceptableProposalNumber = proposal.number;\n        this.previousProposal = proposal;\n    }\n\n} ","export enum LogLevel {\n    Info = \"INFO\",\n    Error = \"ERROR\"\n}\n\nexport class EventLog {\n    constructor(public id: number, public level: LogLevel = LogLevel.Info, public message: string) {}\n}","import { Node, Proposal, NodeType } from \"./Node\";\nimport { EventLog, LogLevel } from \"./EventLog\";\n\nexport function generateNetwork(nodeCount: number, errorPercentage: number): PaxosProtocolNetwork {\n    Node.uniqueId = 0;\n    if(nodeCount <= 0) {\n        throw new Error(\"Number must be positive/nonzero\");\n    }\n    let paxosProtocolNetwork = new PaxosProtocolNetwork();\n    let proposer: Node = new Node(errorPercentage, NodeType.Proposer);\n    paxosProtocolNetwork.registerNode(proposer);\n    paxosProtocolNetwork.proposerId = proposer.id;\n    for(let i = 1; i < nodeCount; i++) {\n        let node = new Node(errorPercentage, NodeType.Acceptor);\n        paxosProtocolNetwork.registerNode(node);\n    }\n    return paxosProtocolNetwork;\n}\n\nexport class PaxosProtocolNetwork {\n\n    nodes: Array<Node>;\n    nodeIdLookup: { [key: number] : Node };\n    _proposerId?: number;\n    chosenValue?: string;\n    eventLog: EventLog[];\n\n    constructor(nodes: Array<Node> = []) {\n        this.nodeIdLookup = {};\n        this.nodes = [];\n        this.eventLog = [];\n        for(let node of nodes) {\n            this.registerNode(node);\n        }\n    }\n\n    get proposer() {\n        if(this._proposerId === undefined) {\n            throw new Error(\"There is no proposer id set\");\n        }\n        return this.nodeIdLookup[this._proposerId];\n    }\n\n    set proposerId(id: number) {\n        if(this._proposerId !== undefined) {\n            this.nodeIdLookup[this._proposerId].nodeType = NodeType.Acceptor;\n        }\n        this.nodeIdLookup[id].nodeType = NodeType.Proposer;\n        this._proposerId = id;\n    }\n\n    get proposerId() {\n        return this._proposerId !== undefined ? this._proposerId : -1\n    }\n\n    registerNode(node: Node) {\n        this.nodeIdLookup[node.id] = node;\n        this.nodes.push(node);\n    }\n\n    propose(proposal: Proposal) {\n        let responses = 0;\n        for(let acceptor of this.nodes) {\n            try {\n                acceptor.handlePropose(proposal);\n                responses++;\n            } catch(e) {\n                let message;\n                if(e instanceof Error) {\n                    message = e.message;\n                } else {\n                    message = String(e);\n                }\n                this.eventLog.push(new EventLog(acceptor.id, LogLevel.Error, message));\n            }\n        }\n        if(responses > this.nodes.length/2) {\n            this.chosenValue = proposal.value;\n            this.eventLog.push(\n                new EventLog(\n                    this.proposerId, \n                    LogLevel.Info, \n                    \"Received \" + responses + \"/\" + this.nodes.length + \" responses. Value '\" + proposal.value + \"' has been chosen\"\n                )\n            )\n        } else {\n            this.eventLog.push(\n                new EventLog(\n                    this.proposerId, \n                    LogLevel.Info, \n                    \"Received \" + responses + \"/\" + this.nodes.length + \" responses. Did not received enough responses from acceptor for value \" + proposal.value + \" to be chosen\"\n                )\n            )\n        }\n    }\n\n    prepare(proposalNumber: number, proposalValue: string) {\n        let maxProposal = new Proposal();\n        let responses = 0;\n        for(let acceptor of this.nodes) {\n            try {\n                let proposal = acceptor.handlePrepare(proposalNumber);\n                if(proposal.number > maxProposal.number) {\n                    maxProposal = proposal;\n                }\n                responses++\n            } catch(e) {\n                let message;\n                if(e instanceof Error) {\n                    message = e.message;\n                } else {\n                    message = String(e);\n                }\n                this.eventLog.push(new EventLog(acceptor.id, LogLevel.Error, message));\n            }\n        }\n        if(responses > this.nodes.length/2) {\n            if(maxProposal.number > -1) {\n                this.eventLog.push(new EventLog(this.proposerId, LogLevel.Info, \"Highest numbered proposal recieved ('\" + maxProposal.value + \"') in prepare overwrites submitted proposal value\"))\n                proposalValue = maxProposal.value;\n            }\n            this.propose(new Proposal(proposalNumber, proposalValue));\n        } else {\n            this.eventLog.push(new EventLog(this.proposerId, LogLevel.Info, \"A majority of nodes did not respond to prepare request. Proposal will not be sent\"))\n        }\n    }\n\n}","import { Text, Heading, Collapse, VStack, Button } from \"@chakra-ui/react\";\nimport { ChevronUpIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\n\ninterface AppDescriptionProps {\n    showDescription: boolean\n    onCollapse: onCollapseCallback\n}\n\ntype onCollapseCallback = () => any;\n\nexport default function AppDescription(props: AppDescriptionProps) {\n\n    const collapseIcon = props.showDescription ? <ChevronUpIcon/> : <ChevronDownIcon/>\n\n    return (    \n        <VStack spacing={3} alignItems=\"flex-start\">\n            <Heading size=\"2xl\" align=\"left\">Paxos Visualization</Heading>\n            <Collapse in={props.showDescription}>\n                <Text align=\"left\">\n                A way to visualize the how the rules that govern the Paxos protocol can acheive consensus in a distributed network.\n                The network of nodes is visualized on the right. Refer to Paxos Made Simple (or the Part-Time Parliament) by Leslie Lamport for a listing of the rules that the Paxos protocol follows.\n                There are 3 main node roles in Paxos: Acceptor, Proposer, and Learner. Here we focus on the Acceptor and Proposer role and have the Proposer serve as an Acceptor as well. The Proposer appears in green in the network and can be changed by selecting any node.\n                </Text>\n            </Collapse>\n            <Button align=\"left\" onClick={props.onCollapse}>{collapseIcon}</Button>\n        </VStack>        \n    )\n}\n\n","import {Table, TableCaption, Thead, Tr, Th, Td, Tbody} from \"@chakra-ui/react\";\nimport { EventLog } from \"../models/EventLog\";\n\ninterface EventLogTableProps {\n    eventLog: EventLog[];\n}\n\nexport default function EventLogTable(props: EventLogTableProps) {\n\n    const tableRows = props.eventLog.map((log, index) => \n        <Tr key={index}>\n            <Td>{log.id}</Td>\n            <Td>{log.level}</Td>\n            <Td>{log.message}</Td>\n        </Tr>\n    )\n\n    return (\n        <Table>\n            <TableCaption>event logs from nodes within network</TableCaption>\n            <Thead>\n                <Tr>\n                    <Th>ID</Th>\n                    <Th>Log Level</Th>\n                    <Th>Message</Th>\n                </Tr>\n            </Thead>\n            <Tbody>\n                {tableRows}\n            </Tbody>\n        </Table>\n    )\n}","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { Node, NodeType } from '../models/Node'\nimport { PaxosProtocolNetwork } from '../models/PaxosNetworkProtocol'\n\ntype proposerCallback = (id: number) => any;\n\ninterface NetworkGraphProps {\n    paxosProtocolNetwork: PaxosProtocolNetwork;\n    onProposerChange: proposerCallback;\n}\n\ninterface NetworkLink {\n    source: number;\n    target: number;\n}\n\n\nfunction NetworkGraph(props: NetworkGraphProps) {\n\n    const svgElement = useRef<SVGSVGElement>(null);\n    var forceSimulation = useRef<any>();\n\n    function getConnectedLinks(nodes: Array<Node>): Array<NetworkLink> {\n        let links: Array<NetworkLink> = [];\n        for(let i = 0; i < nodes.length - 1; i ++) {\n            for(let j = i; j < nodes.length; j++) {\n                links.push({\n                    source: nodes[i].id,\n                    target: nodes[j].id\n                });\n            }\n        }\n        return links;\n    }\n\n    function buildGraph(nodes: Array<Node>, links: Array<NetworkLink>, width: number, height: number, onProposerChange: proposerCallback) {\n        const svg = d3.select(svgElement.current)\n\n        var linkElements = svg.selectAll(\"line\")\n            .data(links, function(d: any) { return d.source.id + \"-\" + d.target.id })\n            .join(\n                (enter) => enter.append(\"line\").style(\"stroke\", \"#aaa\")\n            )\n\n        console.log(nodes)\n\n        var nodeElements: any = svg.selectAll('g.node')\n            .data(nodes, (d: any) => d.d3Id )\n            .join(\n                (enter) => { \n                    let nodeGroup = enter.append(\"g\").attr(\"class\", \"node\")\n\n                    nodeGroup.append(\"circle\")\n                        .attr(\"r\", 30)\n                        .attr(\"class\", \"body\")\n                        .style(\"fill\", (d: any) => d.nodeType === NodeType.Acceptor ? 'gray' : 'green' )\n\n                    nodeGroup.append(\"circle\")\n                        .attr(\"r\", 10)\n                        .attr(\"class\", \"id\")\n                        .attr(\"cy\", -20)\n                        .attr(\"cx\", -19)\n                        .style(\"fill\", \"white\")\n\n                    nodeGroup.append(\"text\")\n                        .attr(\"class\", \"id\")\n                        .style(\"text-anchor\", \"middle\")\n                        .attr(\"y\", -15)\n                        .attr(\"x\", -19)\n                        .text((d: any) => d.id)\n                    \n                    nodeGroup.append(\"text\")\n                        .attr(\"class\", \"proposal\")\n                        .style(\"text-anchor\", \"middle\")\n                        .attr(\"y\", 8)\n                        .text((d: any) => d.previousProposal.number + '/' + d.previousProposal.value + '/' + d.maxAcceptableProposalNumber)\n\n                    return nodeGroup\n                },\n                (update) => {\n                    \n                    update.selectAll(\"circle.body\").style(\"fill\", (d: any) => { console.log(d); return d.nodeType === NodeType.Acceptor ? 'gray' : 'green' })\n\n                    update.selectAll(\"text.proposal\").text((d: any) => d.previousProposal.number + '/' + d.previousProposal.value + '/' + d.maxAcceptableProposalNumber)\n\n                    update.raise() // Ensure nodes are drawn above lines\n\n                    return update\n                }\n            )\n\n        let simulation = d3.forceSimulation(nodes)\n            .force(\"link\", d3.forceLink()\n                .id(function(d: any) { return d.id; })\n                .links(links)\n            )\n            .force(\"charge\", d3.forceManyBody().strength(-800))\n            .force(\"center\", d3.forceCenter(width/2, height/2))\n            .on(\"tick\", ticked);\n        \n        function ticked() {\n            linkElements\n                .attr(\"x1\", function(d: any) { return d.source.x; })\n                .attr(\"y1\", function(d: any) { return d.source.y; })\n                .attr(\"x2\", function(d: any) { return d.target.x; })\n                .attr(\"y2\", function(d: any) { return d.target.y; });\n\n            nodeElements.attr(\"transform\", function(d: any) { return \"translate(\" + d.x + \",\" + d.y + \")\";})\n        }\n\n        nodeElements.on(\"click\", (e: any, d: any) => onProposerChange(d.id))\n\n        function drag(simulation: any) {\n\n            function dragstarted(event: any) {\n                if (!event.active) simulation.alphaTarget(0.3).restart();\n                event.subject.fx = event.subject.x;\n                event.subject.fy = event.subject.y;\n            }\n            \n            function dragged(event: any) {\n                event.subject.fx = event.x;\n                event.subject.fy = event.y;\n            }\n            \n            function dragended(event: any) {\n                if (!event.active) simulation.alphaTarget(0);\n                event.subject.fx = null;\n                event.subject.fy = null;\n            }\n            \n            return d3.drag()\n                .on(\"start\", dragstarted)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragended);\n        }\n\n        nodeElements.call(drag(simulation));\n\n        return simulation;\n    }\n\n\n    useEffect(() => {\n        function handleResize() {\n            let width = 0;\n            let height = 0;\n            if(svgElement.current) {\n                width = svgElement.current.width.baseVal.value;\n                height = svgElement.current.height.baseVal.value;\n            }\n            if(forceSimulation.current) {   \n                forceSimulation.current.stop();\n                forceSimulation.current.force('center', d3.forceCenter(width/2, height/2));\n                forceSimulation.current.restart();\n            }\n        }\n        \n        handleResize()\n        window.addEventListener('resize', handleResize);\n\n        return () => window.removeEventListener('resize', handleResize)\n    })\n\n    useEffect(() => {\n        console.log(forceSimulation.current)\n        let width = 0;\n        let height = 0; \n        if(svgElement.current) {\n            width = svgElement.current.width.baseVal.value;\n            height = svgElement.current.height.baseVal.value;\n        } \n        let links = getConnectedLinks(props.paxosProtocolNetwork.nodes);\n        forceSimulation.current = buildGraph(props.paxosProtocolNetwork.nodes, links, width, height, props.onProposerChange);\n    }, [props.paxosProtocolNetwork])\n\n    return ( \n        <svg className=\"container\" width='100%' height='100%' ref={svgElement}></svg>\n    )\n    \n} \n\nexport default NetworkGraph;","import { \n    SimpleGrid, \n    GridItem, \n    FormControl, \n    FormLabel, \n    NumberInput,\n    NumberInputField, \n    NumberInputStepper, \n    NumberIncrementStepper, \n    NumberDecrementStepper, \n    Input, \n    Button\n} from \"@chakra-ui/react\"\nimport { ChangeEvent } from \"react\";\n\ninterface ProposerControlsProps {\n    proposalNumber: number;\n    minProposalValue: number;\n    onProposalNumberChange: onProposerNumberCallback;\n    proposalValue: string;\n    onProposalValueChange: onProposerValueCallback;\n    onPropose: onProposeCallback;\n    colSpan?: number;\n}\n\ntype onProposerNumberCallback = (value: string) => any;\ntype onProposerValueCallback = (event: ChangeEvent<HTMLInputElement>) => any;\ntype onProposeCallback = (number: number, value: string) => any;\n\nexport default function ProposerControls(props: ProposerControlsProps) {\n\n    return (\n        <SimpleGrid columns={2} columnGap={3} rowGap={6} w=\"full\">\n            <GridItem colSpan={props.colSpan}>\n                <FormControl>\n                    <FormLabel>Proposal Number</FormLabel>\n                    <NumberInput value={props.proposalNumber} min={props.minProposalValue} onChange={props.onProposalNumberChange}>\n                        <NumberInputField />\n                        <NumberInputStepper>\n                            <NumberIncrementStepper />\n                            <NumberDecrementStepper />\n                        </NumberInputStepper>\n                    </NumberInput>\n                </FormControl>\n            </GridItem>\n            <GridItem colSpan={props.colSpan}>\n                <FormControl>\n                    <FormLabel>Proposal Value</FormLabel>\n                    <Input placeholder=\"Fill in any value (e.g. 'foo')\" value={props.proposalValue} onChange={props.onProposalValueChange} />\n                </FormControl>\n            </GridItem>\n            <GridItem colSpan={2}>\n                <Button size=\"lg\" w=\"full\" onClick={() => props.onPropose(props.proposalNumber, props.proposalValue)}>Propose Value</Button>\n            </GridItem>\n        </SimpleGrid>\n    )\n\n}","import { \n    SimpleGrid, \n    GridItem, \n    FormControl, \n    FormLabel, \n    NumberInput, \n    NumberInputField, \n    NumberInputStepper, \n    NumberIncrementStepper, \n    NumberDecrementStepper,\n    Tooltip,\n    Button\n} from \"@chakra-ui/react\"\n\ninterface NetworkControlsProps {\n    nodeCount: number;\n    errorPercentage: number;\n    onNodeCountChange: onNodeCountCallback;\n    onErrorPercentageChange: onNodeCountCallback;\n    onGenerateGraph: onGenerateGraphCallback;\n    colSpan?: number;\n}\n\ntype onNodeCountCallback = (value: string) => any;\ntype onGenerateGraphCallback = (nodeCount: number, errorPercentage: number) => any;\n\nexport default function NetworkControls(props: NetworkControlsProps) {\n    return (\n        <SimpleGrid columns={2} columnGap={3} rowGap={6} w=\"full\">\n            <GridItem colSpan={props.colSpan}>\n                <FormControl>\n                    <FormLabel>Number of Nodes</FormLabel>\n                    <NumberInput value={props.nodeCount} min={3} max={25} onChange={(value) => props.onNodeCountChange(value)}>\n                        <NumberInputField />\n                        <NumberInputStepper>\n                            <NumberIncrementStepper />\n                            <NumberDecrementStepper />\n                        </NumberInputStepper>\n                    </NumberInput>\n                </FormControl>\n            </GridItem>\n            <GridItem colSpan={props.colSpan}>\n                <FormControl>\n                    <FormLabel>Error Percentage</FormLabel>\n                    <Tooltip label=\"Chance for a request to a node to fail\">\n                        <NumberInput value={props.errorPercentage} min={0} max={1} step={0.01} onChange={(value) => props.onErrorPercentageChange(value)}>\n                            <NumberInputField />\n                            <NumberInputStepper>\n                                <NumberIncrementStepper />\n                                <NumberDecrementStepper />\n                            </NumberInputStepper>\n                        </NumberInput>\n                    </Tooltip>\n                </FormControl>\n            </GridItem>\n            <GridItem colSpan={2}>\n                <Button size=\"lg\" w=\"full\" onClick={() => props.onGenerateGraph(props.nodeCount, props.errorPercentage)}>Generate Graph</Button>\n            </GridItem>\n        </SimpleGrid>\n    )\n}","import { useState } from \"react\";\nimport { PaxosProtocolNetwork, generateNetwork } from \"../models/PaxosNetworkProtocol\";\nimport AppDescription from \"./AppDescription\";\nimport EventLogTable from \"./EventLogTable\";\nimport NetworkGraph from \"./NetworkGraph\"; \nimport { \n    Container, \n    Flex, \n    VStack, \n    useBreakpointValue\n} from \"@chakra-ui/react\";\nimport ProposerControls from \"./ProposerControls\";\nimport NetworkControls from \"./NetworkControls\";\n\nexport default function NetworkLayout() {\n    \n    const colSpan = useBreakpointValue({ base: 2, md: 1});\n    const [nodeCount, setNodeCount] = useState(5);\n    const [errorPercentage, setErrorPercentage] = useState(0.0);\n    const [proposalValue, setProposalValue] = useState(\"\");\n    const [minProposalValue, setMinProposalValue] = useState(0);\n    const [proposalNumber, setProposalNumber] = useState(0);\n    const [paxosProtocolNetwork, setPaxosProtocolNetwork] = useState<PaxosProtocolNetwork>(generateNetwork(nodeCount, errorPercentage));\n    const [showDescription, setShowDescription] = useState(true);\n\n    function handleGenerateGraph(nodeCount: number, errorPercentage: number) {\n        setPaxosProtocolNetwork(generateNetwork(nodeCount, errorPercentage));\n    }\n\n    function handlePropose(proposalNumber: number, proposalValue: string) {\n        paxosProtocolNetwork.prepare(proposalNumber, proposalValue);\n        // It is important for data binding in D3 that this is done with a shallow copy\n        // The reason being that d3 binds data by object reference \n        // It is not very \"react\" but d3 wasnt designed for react\n        setPaxosProtocolNetwork(Object.assign(new PaxosProtocolNetwork(), paxosProtocolNetwork))\n    }\n\n    function handleProposerChange(nodeId: number) {\n        setMinProposalValue(paxosProtocolNetwork.nodeIdLookup[nodeId].maxAcceptableProposalNumber);\n        setPaxosProtocolNetwork((previousNetwork) => {\n            previousNetwork.proposerId = nodeId;\n            return Object.assign(new PaxosProtocolNetwork(), paxosProtocolNetwork);\n        })\n    }\n\n    return (\n        <Container maxWidth=\"container.xl\" padding={0}>\n            <Flex h={{ base: 'auto'}} py={[0, 5]} direction={{ base: 'column-reverse', md: 'row'}}>\n                <VStack w=\"full\" h=\"full\" p={10} spacing={10} alignItems=\"flex-start\" bg=\"gray.50\">\n                    <AppDescription showDescription={showDescription} onCollapse={() => setShowDescription(!showDescription)}/>\n                    <NetworkControls\n                        nodeCount={nodeCount}\n                        errorPercentage={errorPercentage}\n                        onNodeCountChange={(value) => setNodeCount(parseInt(value))}\n                        onErrorPercentageChange={(value) => setErrorPercentage(parseFloat(value))}\n                        onGenerateGraph={(nodeCount, errorPercentage) => handleGenerateGraph(nodeCount, errorPercentage)}\n                    />\n                    <ProposerControls \n                        proposalNumber={proposalNumber}\n                        minProposalValue={minProposalValue} \n                        onProposalNumberChange={(value) => setProposalNumber(parseInt(value))}\n                        proposalValue={proposalValue}\n                        colSpan={colSpan}\n                        onProposalValueChange={(event) => setProposalValue(event.target.value)}\n                        onPropose={(proposalNumber, proposalValue) => handlePropose(proposalNumber, proposalValue)}\n                    />\n                </VStack>\n                <VStack w=\"full\" h={{base: '400px', md: 'auto'}} p={0} spacing={0} alignItems=\"flex-start\">\n                    <NetworkGraph paxosProtocolNetwork={paxosProtocolNetwork} onProposerChange={handleProposerChange} />\n                </VStack>\n            </Flex>\n            <EventLogTable eventLog={paxosProtocolNetwork.eventLog}/>\n        </Container>\n    );\n}","import './App.css';\nimport NetworkLayout from './components/NetworkLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NetworkLayout/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}